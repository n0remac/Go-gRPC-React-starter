// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file proto/controls/controls.proto (package controls, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message controls.CreateControlsRequest
 */
export class CreateControlsRequest extends Message<CreateControlsRequest> {
  /**
   * @generated from field: controls.Controls controls = 1;
   */
  controls?: Controls;

  constructor(data?: PartialMessage<CreateControlsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "controls.CreateControlsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "controls", kind: "message", T: Controls },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateControlsRequest {
    return new CreateControlsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateControlsRequest {
    return new CreateControlsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateControlsRequest {
    return new CreateControlsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateControlsRequest | PlainMessage<CreateControlsRequest> | undefined, b: CreateControlsRequest | PlainMessage<CreateControlsRequest> | undefined): boolean {
    return proto3.util.equals(CreateControlsRequest, a, b);
  }
}

/**
 * @generated from message controls.CreateControlsResponse
 */
export class CreateControlsResponse extends Message<CreateControlsResponse> {
  /**
   * @generated from field: controls.Controls controls = 1;
   */
  controls?: Controls;

  constructor(data?: PartialMessage<CreateControlsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "controls.CreateControlsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "controls", kind: "message", T: Controls },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateControlsResponse {
    return new CreateControlsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateControlsResponse {
    return new CreateControlsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateControlsResponse {
    return new CreateControlsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateControlsResponse | PlainMessage<CreateControlsResponse> | undefined, b: CreateControlsResponse | PlainMessage<CreateControlsResponse> | undefined): boolean {
    return proto3.util.equals(CreateControlsResponse, a, b);
  }
}

/**
 * @generated from message controls.GetControlsRequest
 */
export class GetControlsRequest extends Message<GetControlsRequest> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  constructor(data?: PartialMessage<GetControlsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "controls.GetControlsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetControlsRequest {
    return new GetControlsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetControlsRequest {
    return new GetControlsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetControlsRequest {
    return new GetControlsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetControlsRequest | PlainMessage<GetControlsRequest> | undefined, b: GetControlsRequest | PlainMessage<GetControlsRequest> | undefined): boolean {
    return proto3.util.equals(GetControlsRequest, a, b);
  }
}

/**
 * @generated from message controls.GetControlsResponse
 */
export class GetControlsResponse extends Message<GetControlsResponse> {
  /**
   * @generated from field: controls.Controls controls = 1;
   */
  controls?: Controls;

  constructor(data?: PartialMessage<GetControlsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "controls.GetControlsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "controls", kind: "message", T: Controls },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetControlsResponse {
    return new GetControlsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetControlsResponse {
    return new GetControlsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetControlsResponse {
    return new GetControlsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetControlsResponse | PlainMessage<GetControlsResponse> | undefined, b: GetControlsResponse | PlainMessage<GetControlsResponse> | undefined): boolean {
    return proto3.util.equals(GetControlsResponse, a, b);
  }
}

/**
 * @generated from message controls.UpdateControlsRequest
 */
export class UpdateControlsRequest extends Message<UpdateControlsRequest> {
  /**
   * @generated from field: controls.Controls controls = 1;
   */
  controls?: Controls;

  constructor(data?: PartialMessage<UpdateControlsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "controls.UpdateControlsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "controls", kind: "message", T: Controls },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateControlsRequest {
    return new UpdateControlsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateControlsRequest {
    return new UpdateControlsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateControlsRequest {
    return new UpdateControlsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateControlsRequest | PlainMessage<UpdateControlsRequest> | undefined, b: UpdateControlsRequest | PlainMessage<UpdateControlsRequest> | undefined): boolean {
    return proto3.util.equals(UpdateControlsRequest, a, b);
  }
}

/**
 * @generated from message controls.UpdateControlsResponse
 */
export class UpdateControlsResponse extends Message<UpdateControlsResponse> {
  /**
   * @generated from field: controls.Controls controls = 1;
   */
  controls?: Controls;

  constructor(data?: PartialMessage<UpdateControlsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "controls.UpdateControlsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "controls", kind: "message", T: Controls },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateControlsResponse {
    return new UpdateControlsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateControlsResponse {
    return new UpdateControlsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateControlsResponse {
    return new UpdateControlsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateControlsResponse | PlainMessage<UpdateControlsResponse> | undefined, b: UpdateControlsResponse | PlainMessage<UpdateControlsResponse> | undefined): boolean {
    return proto3.util.equals(UpdateControlsResponse, a, b);
  }
}

/**
 * @generated from message controls.DeleteControlsRequest
 */
export class DeleteControlsRequest extends Message<DeleteControlsRequest> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  constructor(data?: PartialMessage<DeleteControlsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "controls.DeleteControlsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteControlsRequest {
    return new DeleteControlsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteControlsRequest {
    return new DeleteControlsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteControlsRequest {
    return new DeleteControlsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteControlsRequest | PlainMessage<DeleteControlsRequest> | undefined, b: DeleteControlsRequest | PlainMessage<DeleteControlsRequest> | undefined): boolean {
    return proto3.util.equals(DeleteControlsRequest, a, b);
  }
}

/**
 * @generated from message controls.DeleteControlsResponse
 */
export class DeleteControlsResponse extends Message<DeleteControlsResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  constructor(data?: PartialMessage<DeleteControlsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "controls.DeleteControlsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteControlsResponse {
    return new DeleteControlsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteControlsResponse {
    return new DeleteControlsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteControlsResponse {
    return new DeleteControlsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteControlsResponse | PlainMessage<DeleteControlsResponse> | undefined, b: DeleteControlsResponse | PlainMessage<DeleteControlsResponse> | undefined): boolean {
    return proto3.util.equals(DeleteControlsResponse, a, b);
  }
}

/**
 * The Controls message represents a controls in the system.
 *
 * @generated from message controls.Controls
 */
export class Controls extends Message<Controls> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: string forward = 2;
   */
  forward = "";

  /**
   * @generated from field: string backward = 3;
   */
  backward = "";

  /**
   * @generated from field: string left = 4;
   */
  left = "";

  /**
   * @generated from field: string right = 5;
   */
  right = "";

  /**
   * @generated from field: int32 speed = 6;
   */
  speed = 0;

  constructor(data?: PartialMessage<Controls>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "controls.Controls";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "forward", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "backward", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "left", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "right", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "speed", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Controls {
    return new Controls().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Controls {
    return new Controls().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Controls {
    return new Controls().fromJsonString(jsonString, options);
  }

  static equals(a: Controls | PlainMessage<Controls> | undefined, b: Controls | PlainMessage<Controls> | undefined): boolean {
    return proto3.util.equals(Controls, a, b);
  }
}

