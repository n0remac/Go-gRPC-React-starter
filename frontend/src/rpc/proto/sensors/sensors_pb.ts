// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file proto/sensors/sensors.proto (package sensors, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message sensors.CreateSensorsRequest
 */
export class CreateSensorsRequest extends Message<CreateSensorsRequest> {
  /**
   * @generated from field: sensors.Sensors sensors = 1;
   */
  sensors?: Sensors;

  constructor(data?: PartialMessage<CreateSensorsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sensors.CreateSensorsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sensors", kind: "message", T: Sensors },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSensorsRequest {
    return new CreateSensorsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSensorsRequest {
    return new CreateSensorsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSensorsRequest {
    return new CreateSensorsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateSensorsRequest | PlainMessage<CreateSensorsRequest> | undefined, b: CreateSensorsRequest | PlainMessage<CreateSensorsRequest> | undefined): boolean {
    return proto3.util.equals(CreateSensorsRequest, a, b);
  }
}

/**
 * @generated from message sensors.CreateSensorsResponse
 */
export class CreateSensorsResponse extends Message<CreateSensorsResponse> {
  /**
   * @generated from field: sensors.Sensors sensors = 1;
   */
  sensors?: Sensors;

  constructor(data?: PartialMessage<CreateSensorsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sensors.CreateSensorsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sensors", kind: "message", T: Sensors },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSensorsResponse {
    return new CreateSensorsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSensorsResponse {
    return new CreateSensorsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSensorsResponse {
    return new CreateSensorsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateSensorsResponse | PlainMessage<CreateSensorsResponse> | undefined, b: CreateSensorsResponse | PlainMessage<CreateSensorsResponse> | undefined): boolean {
    return proto3.util.equals(CreateSensorsResponse, a, b);
  }
}

/**
 * @generated from message sensors.GetSensorsRequest
 */
export class GetSensorsRequest extends Message<GetSensorsRequest> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  constructor(data?: PartialMessage<GetSensorsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sensors.GetSensorsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSensorsRequest {
    return new GetSensorsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSensorsRequest {
    return new GetSensorsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSensorsRequest {
    return new GetSensorsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSensorsRequest | PlainMessage<GetSensorsRequest> | undefined, b: GetSensorsRequest | PlainMessage<GetSensorsRequest> | undefined): boolean {
    return proto3.util.equals(GetSensorsRequest, a, b);
  }
}

/**
 * @generated from message sensors.GetSensorsResponse
 */
export class GetSensorsResponse extends Message<GetSensorsResponse> {
  /**
   * @generated from field: sensors.Sensors sensors = 1;
   */
  sensors?: Sensors;

  constructor(data?: PartialMessage<GetSensorsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sensors.GetSensorsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sensors", kind: "message", T: Sensors },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSensorsResponse {
    return new GetSensorsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSensorsResponse {
    return new GetSensorsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSensorsResponse {
    return new GetSensorsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSensorsResponse | PlainMessage<GetSensorsResponse> | undefined, b: GetSensorsResponse | PlainMessage<GetSensorsResponse> | undefined): boolean {
    return proto3.util.equals(GetSensorsResponse, a, b);
  }
}

/**
 * @generated from message sensors.UpdateSensorsRequest
 */
export class UpdateSensorsRequest extends Message<UpdateSensorsRequest> {
  /**
   * @generated from field: sensors.Sensors sensors = 1;
   */
  sensors?: Sensors;

  constructor(data?: PartialMessage<UpdateSensorsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sensors.UpdateSensorsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sensors", kind: "message", T: Sensors },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateSensorsRequest {
    return new UpdateSensorsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateSensorsRequest {
    return new UpdateSensorsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateSensorsRequest {
    return new UpdateSensorsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateSensorsRequest | PlainMessage<UpdateSensorsRequest> | undefined, b: UpdateSensorsRequest | PlainMessage<UpdateSensorsRequest> | undefined): boolean {
    return proto3.util.equals(UpdateSensorsRequest, a, b);
  }
}

/**
 * @generated from message sensors.UpdateSensorsResponse
 */
export class UpdateSensorsResponse extends Message<UpdateSensorsResponse> {
  /**
   * @generated from field: sensors.Sensors sensors = 1;
   */
  sensors?: Sensors;

  constructor(data?: PartialMessage<UpdateSensorsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sensors.UpdateSensorsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sensors", kind: "message", T: Sensors },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateSensorsResponse {
    return new UpdateSensorsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateSensorsResponse {
    return new UpdateSensorsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateSensorsResponse {
    return new UpdateSensorsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateSensorsResponse | PlainMessage<UpdateSensorsResponse> | undefined, b: UpdateSensorsResponse | PlainMessage<UpdateSensorsResponse> | undefined): boolean {
    return proto3.util.equals(UpdateSensorsResponse, a, b);
  }
}

/**
 * @generated from message sensors.DeleteSensorsRequest
 */
export class DeleteSensorsRequest extends Message<DeleteSensorsRequest> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  constructor(data?: PartialMessage<DeleteSensorsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sensors.DeleteSensorsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteSensorsRequest {
    return new DeleteSensorsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteSensorsRequest {
    return new DeleteSensorsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteSensorsRequest {
    return new DeleteSensorsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteSensorsRequest | PlainMessage<DeleteSensorsRequest> | undefined, b: DeleteSensorsRequest | PlainMessage<DeleteSensorsRequest> | undefined): boolean {
    return proto3.util.equals(DeleteSensorsRequest, a, b);
  }
}

/**
 * @generated from message sensors.DeleteSensorsResponse
 */
export class DeleteSensorsResponse extends Message<DeleteSensorsResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  constructor(data?: PartialMessage<DeleteSensorsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sensors.DeleteSensorsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteSensorsResponse {
    return new DeleteSensorsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteSensorsResponse {
    return new DeleteSensorsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteSensorsResponse {
    return new DeleteSensorsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteSensorsResponse | PlainMessage<DeleteSensorsResponse> | undefined, b: DeleteSensorsResponse | PlainMessage<DeleteSensorsResponse> | undefined): boolean {
    return proto3.util.equals(DeleteSensorsResponse, a, b);
  }
}

/**
 * The Sensors message represents a sensors in the system.
 *
 * @generated from message sensors.Sensors
 */
export class Sensors extends Message<Sensors> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: int32 temperature = 2;
   */
  temperature = 0;

  /**
   * @generated from field: int32 humidity = 3;
   */
  humidity = 0;

  /**
   * @generated from field: int32 distance = 4;
   */
  distance = 0;

  /**
   * @generated from field: int32 light = 5;
   */
  light = 0;

  /**
   * @generated from field: int32 sound = 6;
   */
  sound = 0;

  constructor(data?: PartialMessage<Sensors>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sensors.Sensors";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "temperature", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "humidity", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "distance", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "light", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "sound", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Sensors {
    return new Sensors().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Sensors {
    return new Sensors().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Sensors {
    return new Sensors().fromJsonString(jsonString, options);
  }

  static equals(a: Sensors | PlainMessage<Sensors> | undefined, b: Sensors | PlainMessage<Sensors> | undefined): boolean {
    return proto3.util.equals(Sensors, a, b);
  }
}

