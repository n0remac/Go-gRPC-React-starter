// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/controls/controls.proto

package controls

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ControlsServiceClient is the client API for ControlsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControlsServiceClient interface {
	CreateControls(ctx context.Context, in *CreateControlsRequest, opts ...grpc.CallOption) (*CreateControlsResponse, error)
	GetControls(ctx context.Context, in *GetControlsRequest, opts ...grpc.CallOption) (*GetControlsResponse, error)
	UpdateControls(ctx context.Context, in *UpdateControlsRequest, opts ...grpc.CallOption) (*UpdateControlsResponse, error)
	DeleteControls(ctx context.Context, in *DeleteControlsRequest, opts ...grpc.CallOption) (*DeleteControlsResponse, error)
}

type controlsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewControlsServiceClient(cc grpc.ClientConnInterface) ControlsServiceClient {
	return &controlsServiceClient{cc}
}

func (c *controlsServiceClient) CreateControls(ctx context.Context, in *CreateControlsRequest, opts ...grpc.CallOption) (*CreateControlsResponse, error) {
	out := new(CreateControlsResponse)
	err := c.cc.Invoke(ctx, "/controls.ControlsService/CreateControls", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlsServiceClient) GetControls(ctx context.Context, in *GetControlsRequest, opts ...grpc.CallOption) (*GetControlsResponse, error) {
	out := new(GetControlsResponse)
	err := c.cc.Invoke(ctx, "/controls.ControlsService/GetControls", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlsServiceClient) UpdateControls(ctx context.Context, in *UpdateControlsRequest, opts ...grpc.CallOption) (*UpdateControlsResponse, error) {
	out := new(UpdateControlsResponse)
	err := c.cc.Invoke(ctx, "/controls.ControlsService/UpdateControls", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlsServiceClient) DeleteControls(ctx context.Context, in *DeleteControlsRequest, opts ...grpc.CallOption) (*DeleteControlsResponse, error) {
	out := new(DeleteControlsResponse)
	err := c.cc.Invoke(ctx, "/controls.ControlsService/DeleteControls", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControlsServiceServer is the server API for ControlsService service.
// All implementations should embed UnimplementedControlsServiceServer
// for forward compatibility
type ControlsServiceServer interface {
	CreateControls(context.Context, *CreateControlsRequest) (*CreateControlsResponse, error)
	GetControls(context.Context, *GetControlsRequest) (*GetControlsResponse, error)
	UpdateControls(context.Context, *UpdateControlsRequest) (*UpdateControlsResponse, error)
	DeleteControls(context.Context, *DeleteControlsRequest) (*DeleteControlsResponse, error)
}

// UnimplementedControlsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedControlsServiceServer struct {
}

func (UnimplementedControlsServiceServer) CreateControls(context.Context, *CreateControlsRequest) (*CreateControlsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateControls not implemented")
}
func (UnimplementedControlsServiceServer) GetControls(context.Context, *GetControlsRequest) (*GetControlsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetControls not implemented")
}
func (UnimplementedControlsServiceServer) UpdateControls(context.Context, *UpdateControlsRequest) (*UpdateControlsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateControls not implemented")
}
func (UnimplementedControlsServiceServer) DeleteControls(context.Context, *DeleteControlsRequest) (*DeleteControlsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteControls not implemented")
}

// UnsafeControlsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControlsServiceServer will
// result in compilation errors.
type UnsafeControlsServiceServer interface {
	mustEmbedUnimplementedControlsServiceServer()
}

func RegisterControlsServiceServer(s grpc.ServiceRegistrar, srv ControlsServiceServer) {
	s.RegisterService(&ControlsService_ServiceDesc, srv)
}

func _ControlsService_CreateControls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateControlsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlsServiceServer).CreateControls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controls.ControlsService/CreateControls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlsServiceServer).CreateControls(ctx, req.(*CreateControlsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlsService_GetControls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetControlsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlsServiceServer).GetControls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controls.ControlsService/GetControls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlsServiceServer).GetControls(ctx, req.(*GetControlsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlsService_UpdateControls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateControlsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlsServiceServer).UpdateControls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controls.ControlsService/UpdateControls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlsServiceServer).UpdateControls(ctx, req.(*UpdateControlsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlsService_DeleteControls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteControlsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlsServiceServer).DeleteControls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controls.ControlsService/DeleteControls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlsServiceServer).DeleteControls(ctx, req.(*DeleteControlsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ControlsService_ServiceDesc is the grpc.ServiceDesc for ControlsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ControlsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "controls.ControlsService",
	HandlerType: (*ControlsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateControls",
			Handler:    _ControlsService_CreateControls_Handler,
		},
		{
			MethodName: "GetControls",
			Handler:    _ControlsService_GetControls_Handler,
		},
		{
			MethodName: "UpdateControls",
			Handler:    _ControlsService_UpdateControls_Handler,
		},
		{
			MethodName: "DeleteControls",
			Handler:    _ControlsService_DeleteControls_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/controls/controls.proto",
}
