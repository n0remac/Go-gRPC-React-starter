// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/controls/controls.proto

package controlsconnect

import (
	controls "Go-gRPC-React-starter/gen/proto/controls"
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ControlsServiceName is the fully-qualified name of the ControlsService service.
	ControlsServiceName = "controls.ControlsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ControlsServiceCreateControlsProcedure is the fully-qualified name of the ControlsService's
	// CreateControls RPC.
	ControlsServiceCreateControlsProcedure = "/controls.ControlsService/CreateControls"
	// ControlsServiceGetControlsProcedure is the fully-qualified name of the ControlsService's
	// GetControls RPC.
	ControlsServiceGetControlsProcedure = "/controls.ControlsService/GetControls"
	// ControlsServiceUpdateControlsProcedure is the fully-qualified name of the ControlsService's
	// UpdateControls RPC.
	ControlsServiceUpdateControlsProcedure = "/controls.ControlsService/UpdateControls"
	// ControlsServiceDeleteControlsProcedure is the fully-qualified name of the ControlsService's
	// DeleteControls RPC.
	ControlsServiceDeleteControlsProcedure = "/controls.ControlsService/DeleteControls"
)

// ControlsServiceClient is a client for the controls.ControlsService service.
type ControlsServiceClient interface {
	CreateControls(context.Context, *connect_go.Request[controls.CreateControlsRequest]) (*connect_go.Response[controls.CreateControlsResponse], error)
	GetControls(context.Context, *connect_go.Request[controls.GetControlsRequest]) (*connect_go.Response[controls.GetControlsResponse], error)
	UpdateControls(context.Context, *connect_go.Request[controls.UpdateControlsRequest]) (*connect_go.Response[controls.UpdateControlsResponse], error)
	DeleteControls(context.Context, *connect_go.Request[controls.DeleteControlsRequest]) (*connect_go.Response[controls.DeleteControlsResponse], error)
}

// NewControlsServiceClient constructs a client for the controls.ControlsService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewControlsServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ControlsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &controlsServiceClient{
		createControls: connect_go.NewClient[controls.CreateControlsRequest, controls.CreateControlsResponse](
			httpClient,
			baseURL+ControlsServiceCreateControlsProcedure,
			opts...,
		),
		getControls: connect_go.NewClient[controls.GetControlsRequest, controls.GetControlsResponse](
			httpClient,
			baseURL+ControlsServiceGetControlsProcedure,
			opts...,
		),
		updateControls: connect_go.NewClient[controls.UpdateControlsRequest, controls.UpdateControlsResponse](
			httpClient,
			baseURL+ControlsServiceUpdateControlsProcedure,
			opts...,
		),
		deleteControls: connect_go.NewClient[controls.DeleteControlsRequest, controls.DeleteControlsResponse](
			httpClient,
			baseURL+ControlsServiceDeleteControlsProcedure,
			opts...,
		),
	}
}

// controlsServiceClient implements ControlsServiceClient.
type controlsServiceClient struct {
	createControls *connect_go.Client[controls.CreateControlsRequest, controls.CreateControlsResponse]
	getControls    *connect_go.Client[controls.GetControlsRequest, controls.GetControlsResponse]
	updateControls *connect_go.Client[controls.UpdateControlsRequest, controls.UpdateControlsResponse]
	deleteControls *connect_go.Client[controls.DeleteControlsRequest, controls.DeleteControlsResponse]
}

// CreateControls calls controls.ControlsService.CreateControls.
func (c *controlsServiceClient) CreateControls(ctx context.Context, req *connect_go.Request[controls.CreateControlsRequest]) (*connect_go.Response[controls.CreateControlsResponse], error) {
	return c.createControls.CallUnary(ctx, req)
}

// GetControls calls controls.ControlsService.GetControls.
func (c *controlsServiceClient) GetControls(ctx context.Context, req *connect_go.Request[controls.GetControlsRequest]) (*connect_go.Response[controls.GetControlsResponse], error) {
	return c.getControls.CallUnary(ctx, req)
}

// UpdateControls calls controls.ControlsService.UpdateControls.
func (c *controlsServiceClient) UpdateControls(ctx context.Context, req *connect_go.Request[controls.UpdateControlsRequest]) (*connect_go.Response[controls.UpdateControlsResponse], error) {
	return c.updateControls.CallUnary(ctx, req)
}

// DeleteControls calls controls.ControlsService.DeleteControls.
func (c *controlsServiceClient) DeleteControls(ctx context.Context, req *connect_go.Request[controls.DeleteControlsRequest]) (*connect_go.Response[controls.DeleteControlsResponse], error) {
	return c.deleteControls.CallUnary(ctx, req)
}

// ControlsServiceHandler is an implementation of the controls.ControlsService service.
type ControlsServiceHandler interface {
	CreateControls(context.Context, *connect_go.Request[controls.CreateControlsRequest]) (*connect_go.Response[controls.CreateControlsResponse], error)
	GetControls(context.Context, *connect_go.Request[controls.GetControlsRequest]) (*connect_go.Response[controls.GetControlsResponse], error)
	UpdateControls(context.Context, *connect_go.Request[controls.UpdateControlsRequest]) (*connect_go.Response[controls.UpdateControlsResponse], error)
	DeleteControls(context.Context, *connect_go.Request[controls.DeleteControlsRequest]) (*connect_go.Response[controls.DeleteControlsResponse], error)
}

// NewControlsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewControlsServiceHandler(svc ControlsServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	controlsServiceCreateControlsHandler := connect_go.NewUnaryHandler(
		ControlsServiceCreateControlsProcedure,
		svc.CreateControls,
		opts...,
	)
	controlsServiceGetControlsHandler := connect_go.NewUnaryHandler(
		ControlsServiceGetControlsProcedure,
		svc.GetControls,
		opts...,
	)
	controlsServiceUpdateControlsHandler := connect_go.NewUnaryHandler(
		ControlsServiceUpdateControlsProcedure,
		svc.UpdateControls,
		opts...,
	)
	controlsServiceDeleteControlsHandler := connect_go.NewUnaryHandler(
		ControlsServiceDeleteControlsProcedure,
		svc.DeleteControls,
		opts...,
	)
	return "/controls.ControlsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ControlsServiceCreateControlsProcedure:
			controlsServiceCreateControlsHandler.ServeHTTP(w, r)
		case ControlsServiceGetControlsProcedure:
			controlsServiceGetControlsHandler.ServeHTTP(w, r)
		case ControlsServiceUpdateControlsProcedure:
			controlsServiceUpdateControlsHandler.ServeHTTP(w, r)
		case ControlsServiceDeleteControlsProcedure:
			controlsServiceDeleteControlsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedControlsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedControlsServiceHandler struct{}

func (UnimplementedControlsServiceHandler) CreateControls(context.Context, *connect_go.Request[controls.CreateControlsRequest]) (*connect_go.Response[controls.CreateControlsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("controls.ControlsService.CreateControls is not implemented"))
}

func (UnimplementedControlsServiceHandler) GetControls(context.Context, *connect_go.Request[controls.GetControlsRequest]) (*connect_go.Response[controls.GetControlsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("controls.ControlsService.GetControls is not implemented"))
}

func (UnimplementedControlsServiceHandler) UpdateControls(context.Context, *connect_go.Request[controls.UpdateControlsRequest]) (*connect_go.Response[controls.UpdateControlsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("controls.ControlsService.UpdateControls is not implemented"))
}

func (UnimplementedControlsServiceHandler) DeleteControls(context.Context, *connect_go.Request[controls.DeleteControlsRequest]) (*connect_go.Response[controls.DeleteControlsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("controls.ControlsService.DeleteControls is not implemented"))
}
