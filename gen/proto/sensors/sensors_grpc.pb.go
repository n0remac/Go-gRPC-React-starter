// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/sensors/sensors.proto

package sensors

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SensorsServiceClient is the client API for SensorsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SensorsServiceClient interface {
	CreateSensors(ctx context.Context, in *CreateSensorsRequest, opts ...grpc.CallOption) (*CreateSensorsResponse, error)
	GetSensors(ctx context.Context, in *GetSensorsRequest, opts ...grpc.CallOption) (*GetSensorsResponse, error)
	UpdateSensors(ctx context.Context, in *UpdateSensorsRequest, opts ...grpc.CallOption) (*UpdateSensorsResponse, error)
	DeleteSensors(ctx context.Context, in *DeleteSensorsRequest, opts ...grpc.CallOption) (*DeleteSensorsResponse, error)
}

type sensorsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSensorsServiceClient(cc grpc.ClientConnInterface) SensorsServiceClient {
	return &sensorsServiceClient{cc}
}

func (c *sensorsServiceClient) CreateSensors(ctx context.Context, in *CreateSensorsRequest, opts ...grpc.CallOption) (*CreateSensorsResponse, error) {
	out := new(CreateSensorsResponse)
	err := c.cc.Invoke(ctx, "/sensors.SensorsService/CreateSensors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensorsServiceClient) GetSensors(ctx context.Context, in *GetSensorsRequest, opts ...grpc.CallOption) (*GetSensorsResponse, error) {
	out := new(GetSensorsResponse)
	err := c.cc.Invoke(ctx, "/sensors.SensorsService/GetSensors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensorsServiceClient) UpdateSensors(ctx context.Context, in *UpdateSensorsRequest, opts ...grpc.CallOption) (*UpdateSensorsResponse, error) {
	out := new(UpdateSensorsResponse)
	err := c.cc.Invoke(ctx, "/sensors.SensorsService/UpdateSensors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensorsServiceClient) DeleteSensors(ctx context.Context, in *DeleteSensorsRequest, opts ...grpc.CallOption) (*DeleteSensorsResponse, error) {
	out := new(DeleteSensorsResponse)
	err := c.cc.Invoke(ctx, "/sensors.SensorsService/DeleteSensors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SensorsServiceServer is the server API for SensorsService service.
// All implementations should embed UnimplementedSensorsServiceServer
// for forward compatibility
type SensorsServiceServer interface {
	CreateSensors(context.Context, *CreateSensorsRequest) (*CreateSensorsResponse, error)
	GetSensors(context.Context, *GetSensorsRequest) (*GetSensorsResponse, error)
	UpdateSensors(context.Context, *UpdateSensorsRequest) (*UpdateSensorsResponse, error)
	DeleteSensors(context.Context, *DeleteSensorsRequest) (*DeleteSensorsResponse, error)
}

// UnimplementedSensorsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSensorsServiceServer struct {
}

func (UnimplementedSensorsServiceServer) CreateSensors(context.Context, *CreateSensorsRequest) (*CreateSensorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSensors not implemented")
}
func (UnimplementedSensorsServiceServer) GetSensors(context.Context, *GetSensorsRequest) (*GetSensorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSensors not implemented")
}
func (UnimplementedSensorsServiceServer) UpdateSensors(context.Context, *UpdateSensorsRequest) (*UpdateSensorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSensors not implemented")
}
func (UnimplementedSensorsServiceServer) DeleteSensors(context.Context, *DeleteSensorsRequest) (*DeleteSensorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSensors not implemented")
}

// UnsafeSensorsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SensorsServiceServer will
// result in compilation errors.
type UnsafeSensorsServiceServer interface {
	mustEmbedUnimplementedSensorsServiceServer()
}

func RegisterSensorsServiceServer(s grpc.ServiceRegistrar, srv SensorsServiceServer) {
	s.RegisterService(&SensorsService_ServiceDesc, srv)
}

func _SensorsService_CreateSensors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSensorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorsServiceServer).CreateSensors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensors.SensorsService/CreateSensors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorsServiceServer).CreateSensors(ctx, req.(*CreateSensorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorsService_GetSensors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSensorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorsServiceServer).GetSensors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensors.SensorsService/GetSensors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorsServiceServer).GetSensors(ctx, req.(*GetSensorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorsService_UpdateSensors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSensorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorsServiceServer).UpdateSensors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensors.SensorsService/UpdateSensors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorsServiceServer).UpdateSensors(ctx, req.(*UpdateSensorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorsService_DeleteSensors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSensorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorsServiceServer).DeleteSensors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensors.SensorsService/DeleteSensors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorsServiceServer).DeleteSensors(ctx, req.(*DeleteSensorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SensorsService_ServiceDesc is the grpc.ServiceDesc for SensorsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SensorsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sensors.SensorsService",
	HandlerType: (*SensorsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSensors",
			Handler:    _SensorsService_CreateSensors_Handler,
		},
		{
			MethodName: "GetSensors",
			Handler:    _SensorsService_GetSensors_Handler,
		},
		{
			MethodName: "UpdateSensors",
			Handler:    _SensorsService_UpdateSensors_Handler,
		},
		{
			MethodName: "DeleteSensors",
			Handler:    _SensorsService_DeleteSensors_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sensors/sensors.proto",
}
