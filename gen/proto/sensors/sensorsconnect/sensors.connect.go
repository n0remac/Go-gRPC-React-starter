// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/sensors/sensors.proto

package sensorsconnect

import (
	sensors "Go-gRPC-React-starter/gen/proto/sensors"
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// SensorsServiceName is the fully-qualified name of the SensorsService service.
	SensorsServiceName = "sensors.SensorsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SensorsServiceCreateSensorsProcedure is the fully-qualified name of the SensorsService's
	// CreateSensors RPC.
	SensorsServiceCreateSensorsProcedure = "/sensors.SensorsService/CreateSensors"
	// SensorsServiceGetSensorsProcedure is the fully-qualified name of the SensorsService's GetSensors
	// RPC.
	SensorsServiceGetSensorsProcedure = "/sensors.SensorsService/GetSensors"
	// SensorsServiceUpdateSensorsProcedure is the fully-qualified name of the SensorsService's
	// UpdateSensors RPC.
	SensorsServiceUpdateSensorsProcedure = "/sensors.SensorsService/UpdateSensors"
	// SensorsServiceDeleteSensorsProcedure is the fully-qualified name of the SensorsService's
	// DeleteSensors RPC.
	SensorsServiceDeleteSensorsProcedure = "/sensors.SensorsService/DeleteSensors"
)

// SensorsServiceClient is a client for the sensors.SensorsService service.
type SensorsServiceClient interface {
	CreateSensors(context.Context, *connect_go.Request[sensors.CreateSensorsRequest]) (*connect_go.Response[sensors.CreateSensorsResponse], error)
	GetSensors(context.Context, *connect_go.Request[sensors.GetSensorsRequest]) (*connect_go.Response[sensors.GetSensorsResponse], error)
	UpdateSensors(context.Context, *connect_go.Request[sensors.UpdateSensorsRequest]) (*connect_go.Response[sensors.UpdateSensorsResponse], error)
	DeleteSensors(context.Context, *connect_go.Request[sensors.DeleteSensorsRequest]) (*connect_go.Response[sensors.DeleteSensorsResponse], error)
}

// NewSensorsServiceClient constructs a client for the sensors.SensorsService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSensorsServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) SensorsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &sensorsServiceClient{
		createSensors: connect_go.NewClient[sensors.CreateSensorsRequest, sensors.CreateSensorsResponse](
			httpClient,
			baseURL+SensorsServiceCreateSensorsProcedure,
			opts...,
		),
		getSensors: connect_go.NewClient[sensors.GetSensorsRequest, sensors.GetSensorsResponse](
			httpClient,
			baseURL+SensorsServiceGetSensorsProcedure,
			opts...,
		),
		updateSensors: connect_go.NewClient[sensors.UpdateSensorsRequest, sensors.UpdateSensorsResponse](
			httpClient,
			baseURL+SensorsServiceUpdateSensorsProcedure,
			opts...,
		),
		deleteSensors: connect_go.NewClient[sensors.DeleteSensorsRequest, sensors.DeleteSensorsResponse](
			httpClient,
			baseURL+SensorsServiceDeleteSensorsProcedure,
			opts...,
		),
	}
}

// sensorsServiceClient implements SensorsServiceClient.
type sensorsServiceClient struct {
	createSensors *connect_go.Client[sensors.CreateSensorsRequest, sensors.CreateSensorsResponse]
	getSensors    *connect_go.Client[sensors.GetSensorsRequest, sensors.GetSensorsResponse]
	updateSensors *connect_go.Client[sensors.UpdateSensorsRequest, sensors.UpdateSensorsResponse]
	deleteSensors *connect_go.Client[sensors.DeleteSensorsRequest, sensors.DeleteSensorsResponse]
}

// CreateSensors calls sensors.SensorsService.CreateSensors.
func (c *sensorsServiceClient) CreateSensors(ctx context.Context, req *connect_go.Request[sensors.CreateSensorsRequest]) (*connect_go.Response[sensors.CreateSensorsResponse], error) {
	return c.createSensors.CallUnary(ctx, req)
}

// GetSensors calls sensors.SensorsService.GetSensors.
func (c *sensorsServiceClient) GetSensors(ctx context.Context, req *connect_go.Request[sensors.GetSensorsRequest]) (*connect_go.Response[sensors.GetSensorsResponse], error) {
	return c.getSensors.CallUnary(ctx, req)
}

// UpdateSensors calls sensors.SensorsService.UpdateSensors.
func (c *sensorsServiceClient) UpdateSensors(ctx context.Context, req *connect_go.Request[sensors.UpdateSensorsRequest]) (*connect_go.Response[sensors.UpdateSensorsResponse], error) {
	return c.updateSensors.CallUnary(ctx, req)
}

// DeleteSensors calls sensors.SensorsService.DeleteSensors.
func (c *sensorsServiceClient) DeleteSensors(ctx context.Context, req *connect_go.Request[sensors.DeleteSensorsRequest]) (*connect_go.Response[sensors.DeleteSensorsResponse], error) {
	return c.deleteSensors.CallUnary(ctx, req)
}

// SensorsServiceHandler is an implementation of the sensors.SensorsService service.
type SensorsServiceHandler interface {
	CreateSensors(context.Context, *connect_go.Request[sensors.CreateSensorsRequest]) (*connect_go.Response[sensors.CreateSensorsResponse], error)
	GetSensors(context.Context, *connect_go.Request[sensors.GetSensorsRequest]) (*connect_go.Response[sensors.GetSensorsResponse], error)
	UpdateSensors(context.Context, *connect_go.Request[sensors.UpdateSensorsRequest]) (*connect_go.Response[sensors.UpdateSensorsResponse], error)
	DeleteSensors(context.Context, *connect_go.Request[sensors.DeleteSensorsRequest]) (*connect_go.Response[sensors.DeleteSensorsResponse], error)
}

// NewSensorsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSensorsServiceHandler(svc SensorsServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	sensorsServiceCreateSensorsHandler := connect_go.NewUnaryHandler(
		SensorsServiceCreateSensorsProcedure,
		svc.CreateSensors,
		opts...,
	)
	sensorsServiceGetSensorsHandler := connect_go.NewUnaryHandler(
		SensorsServiceGetSensorsProcedure,
		svc.GetSensors,
		opts...,
	)
	sensorsServiceUpdateSensorsHandler := connect_go.NewUnaryHandler(
		SensorsServiceUpdateSensorsProcedure,
		svc.UpdateSensors,
		opts...,
	)
	sensorsServiceDeleteSensorsHandler := connect_go.NewUnaryHandler(
		SensorsServiceDeleteSensorsProcedure,
		svc.DeleteSensors,
		opts...,
	)
	return "/sensors.SensorsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SensorsServiceCreateSensorsProcedure:
			sensorsServiceCreateSensorsHandler.ServeHTTP(w, r)
		case SensorsServiceGetSensorsProcedure:
			sensorsServiceGetSensorsHandler.ServeHTTP(w, r)
		case SensorsServiceUpdateSensorsProcedure:
			sensorsServiceUpdateSensorsHandler.ServeHTTP(w, r)
		case SensorsServiceDeleteSensorsProcedure:
			sensorsServiceDeleteSensorsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSensorsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSensorsServiceHandler struct{}

func (UnimplementedSensorsServiceHandler) CreateSensors(context.Context, *connect_go.Request[sensors.CreateSensorsRequest]) (*connect_go.Response[sensors.CreateSensorsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sensors.SensorsService.CreateSensors is not implemented"))
}

func (UnimplementedSensorsServiceHandler) GetSensors(context.Context, *connect_go.Request[sensors.GetSensorsRequest]) (*connect_go.Response[sensors.GetSensorsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sensors.SensorsService.GetSensors is not implemented"))
}

func (UnimplementedSensorsServiceHandler) UpdateSensors(context.Context, *connect_go.Request[sensors.UpdateSensorsRequest]) (*connect_go.Response[sensors.UpdateSensorsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sensors.SensorsService.UpdateSensors is not implemented"))
}

func (UnimplementedSensorsServiceHandler) DeleteSensors(context.Context, *connect_go.Request[sensors.DeleteSensorsRequest]) (*connect_go.Response[sensors.DeleteSensorsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sensors.SensorsService.DeleteSensors is not implemented"))
}
